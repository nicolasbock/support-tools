#!/usr/bin/env bash

set -o errexit
set -o nounset

now()
{
    date '+%Y%m%d-%H:%M:%S'
}

errexit()
{
    echo "$(now) [ERROR] $*" 1>&2
    exit 1
}

if [[ ${BASH_VERSINFO[0]} -lt 4 ]]
then
    errexit 'this script requires bash version 4 or greater'
fi

declare -r debug='false'

declare -r orig_IFS="$IFS"

# defaults
declare -r default_vhost='/'
declare -r default_queue_regex='.*'
declare -r default_queue_exclude_regex='^$'
declare -r default_disable_health_check='false'
declare -ri default_max_count=60

# Nothing to modify from here to the end
declare -a nodes
declare -i node_count=0

sync_queue()
{
    echo -n "$(now) [INFO] "
    rabbitmqctl sync_queue -p "$vhost" "$1"
}

get_queue_master()
{
    local -r queue="$1"
    # shellcheck disable=SC1087
    rabbitmqctl -q -p "$vhost" list_queues name pid | grep -E "^$queue[[:space:]]" | cut -f2 | sed -e 's/[><]//g' -e 's/\(\.[[:digit:]][[:digit:]]*\)\{3\}$//g'
}

ensure_node_health()
{
    # shellcheck disable=SC2155
    local tmp="$(mktemp)"
    for n in "${nodes[@]}"
    do
        if ! rabbitmqctl -n "$n" node_health_check > "$tmp" 2>&1
        then
            echo "$(now) [ERROR] Node '$n' failed health check:" 1>&2
            cat "$tmp" 1>&2
            rm -f "$tmp"
            exit 1
        fi
    done
    rm -f "$tmp"
}

set_temp_queue_policies()
{
    echo "$(now) [INFO] Setting temporary policies on vhost: $vhost"

    ensure_node_health

    while true
    do
        local node=''
        local tmp=''
        local -i num_nodes=0
        unset node_list
        unset node_master_count
        local -A node_list
        local -A node_master_count

        # List of nodes
        IFS=','
        for tmp in $(rabbitmqctl eval 'rabbit_nodes:all_running().' | tr -d '\n ' | sed -e "s/[][']//g")
        do
            node_list[$tmp]=1
            node_master_count[$tmp]=0
            (( num_nodes = num_nodes + 1 ))
        done
        IFS="$orig_IFS"

        if [[ $debug == 'true' ]]
        then
            echo "$(now) [DEBUG] node_list: ${!node_list[*]}"
            for K in "${!node_list[@]}"
            do
                echo "$K --- ${node_list[$K]}"
            done
        fi

        # List of masters extracted from node_list + list_queues masters.
        IFS=$'\n'
        for tmp in $(rabbitmqctl -q -p "$vhost" list_queues pid 2>&1 | grep -vE '^pid' | sed -e 's/[><]//g' -e 's/\(\.[[:digit:]][[:digit:]]*\)\{3\}$//g' | sort | uniq -c)
        do
            IFS="$orig_IFS"
            # shellcheck disable=SC2086
            set -- $tmp

            if [[ $debug == 'true' ]]
            then
                echo "$(now) [DEBUG] evaluating node_master_count[$2]=$1"
            fi

            node_master_count[$2]="$1"
            IFS=$'\n'
        done
        IFS="$orig_IFS"

        if [[ $debug == 'true' ]]
        then
            echo "$(now) [DEBUG] node_master_count: ${!node_master_count[*]}"
            for K in "${!node_master_count[@]}"
            do
                echo "$K --- ${node_master_count[$K]}"
            done
        fi

        node=''
        local first_iteration='true'
        local -i node_queue_count=0
        local node_with_most_queues=''
        local -i node_with_most_queues_count=0
        local node_with_fewest_queues=''
        local -i node_with_fewest_queues_count=0
        local -i total_queue_count=0
        local -i max_queues_desired_per_host=0

        for node in "${!node_master_count[@]}"
        do
            node_queue_count="${node_master_count[$node]}"
            total_queue_count="$((total_queue_count + node_queue_count))"

            if [[ $first_iteration == 'true' ]]
            then
                first_iteration='false'
                node_with_most_queues="$node"
                node_with_most_queues_count="$node_queue_count"
                node_with_fewest_queues="$node"
                node_with_fewest_queues_count="$node_queue_count"
            else
                if (( node_queue_count > node_with_most_queues_count ))
                then
                    node_with_most_queues="$node"
                    node_with_most_queues_count="$node_queue_count"
                fi
                if (( node_queue_count < node_with_fewest_queues_count ))
                then
                    node_with_fewest_queues="$node"
                    node_with_fewest_queues_count="$node_queue_count"
                fi
            fi
        done

        # upper bound for queues per host: total number of queues divided by number of hosts round up
        max_queues_desired_per_host="$(((total_queue_count / num_nodes) + (total_queue_count % num_nodes > 0)))"

        if (( node_with_most_queues_count <= max_queues_desired_per_host ))
        then
            echo "$(now) [INFO] Queues are balanced. Exiting!"
            exit 0
        fi

        # Get one queue with master in the node with more masters (max node)
        local queue_and_pid=''
        queue_and_pid="$(rabbitmqctl -q -p "$vhost" list_queues name pid 2>&1 | grep -E "$queue_regex"|grep -v -E "$queue_exclude_regex" | grep "$node_with_most_queues" | head -n 1)"

        if [[ $disable_health_check == 'false' ]]
        then
            ensure_node_health
        fi

        local queue=''
        local pid=''
        IFS=$'\t' read -r queue pid <<< "$queue_and_pid"

        local current_queue_regex=''
        # shellcheck disable=SC2001,SC2016
        current_queue_regex="$(sed -e 's/[.[\*^$()+?{|]/\\&/g' <<< "$queue")"

        IFS="$orig_IFS"
        local current_master=''
        current_master="$(sed -e 's/[><]//g' -e 's/\(\.[[:digit:]][[:digit:]]*\)\{3\}$//g' <<< "$pid")"
        local new_master="$node_with_fewest_queues"

        # Move queue master to other node (if so)
        if [[ $new_master == "$current_master" ]]
        then
            echo "$(now) [INFO] Not updating current queue master '$current_master' for queue '$queue'"
        else
            echo "$(now) [INFO] Updating queue master for queue '$queue' from '$current_master' to '$new_master'"
            echo -n "$(now) [INFO] "
            rabbitmqctl set_policy -p "$vhost" --priority 990 --apply-to 'queues' "$queue-ha-temp" "^$current_queue_regex$" '{"ha-mode":"exactly","ha-params":1}'
            sync_queue "$queue"

            local policy_set_master="{\"ha-mode\":\"nodes\",\"ha-params\":[\"$new_master\"]}"
            echo -n "$(now) [INFO] "
            rabbitmqctl set_policy -p "$vhost" --priority 992 --apply-to 'queues' "$queue-ha-temp" "^$current_queue_regex$" "$policy_set_master"
            sync_queue "$queue"

            local -i count=0
            while true
            do
                if (( count == max_count ))
                then
                    echo "$(now) [WARNING] Queue master not updated for $queue, reached max retries (attemtps: $count). Moving to the next one."
                    break
                fi

                IFS="$orig_IFS"
                local updated_master=''
                updated_master="$(get_queue_master "$current_queue_regex")"
                if [[ $new_master == "$updated_master" ]]
                then
                    echo "$(now) [INFO] Queue master successfully updated: '$updated_master'"
                    break
                else
                    (( count = count + 1 ))
                    echo "$(now) [WARNING] queue master has not yet updated, wanted '$new_master', got '$updated_master' (attempts: $count)"
                    sleep 5
                fi
            done

            echo -n "$(now) [INFO] "
            rabbitmqctl clear_policy -p "$vhost" "$queue-ha-temp"
            sync_queue "$queue"
        fi

    done

    IFS="$orig_IFS"
}

validate()
{
    for cmd in erl rabbitmqctl
    do
        if ! command -v "$cmd" &> /dev/null
        then
            errexit "'$cmd' must be executable and in your PATH"
        fi
    done

    IFS=','
    local -i i=0
    for node in $(rabbitmqctl eval 'rabbit_nodes:all_running().' | tr -d '\n ' | sed -e "s/[][']//g")
    do
        nodes[$i]="$node"
        (( i = i + 1 ))
    done
    IFS="$orig_IFS"

    node_count="${#nodes[@]}"
    if (( node_count < 2 ))
    then
        errexit "At least two clustered nodes are required for running this script!"
    fi
}

usage()
{
    cat << EOF
$0 [-d] [-h] [-c count] [-p vhost] [-r regex]

-d          disable checking the node health before applying
            the queue policies. Default is '$default_disable_health_check'
-h          show this help message
-c count    use max retries for checking if the queue has moved to the new
            master. Default is ${default_max_count}
-p vhost    use 'vhost' instead of default '$default_vhost'
-r regex    use 'regex' to select queues for which the queue master
            should be migrated. Default is '$default_queue_regex'
EOF
}

parse_options()
{
    local OPTARG
    local OPTIND
    local opt
    local vhost_opt_set='false'
    local queue_regex_opt_set='false'
    local disable_health_check_opt_set='false'
    local max_count_opt_set='false'

    while getopts 'dhc:p:r:x:' opt "$@"
    do
        case "$opt" in
            d)
                disable_health_check_opt_set='true'
                declare -gr disable_health_check='true'
                ;;
            h)
                usage
                exit 0
                ;;
            c)
                max_count_opt_set='true'
                declare -gri max_count="$OPTARG"
                ;;
            p)
                vhost_opt_set='true'
                declare -gr vhost="$OPTARG"
                ;;
            x)
                queue_exclude_regex_opt_set='true'
                declare -gr queue_exclude_regex="$OPTARG"
                ;;
            r)
                queue_regex_opt_set='true'
                declare -gr queue_regex="$OPTARG"
                ;;
            *)
                usage
                exit 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    if [[ $vhost_opt_set == 'false' ]]
    then
        declare -gr vhost="$default_vhost"
    fi
    if [[ $queue_exclude_regex_opt_set == 'false' ]]
    then
        declare -gr queue_exclude_regex="$default_queue_exclude_regex"
    fi
    if [[ $queue_regex_opt_set == 'false' ]]
    then
        declare -gr queue_regex="$default_queue_regex"
    fi
    if [[ $disable_health_check_opt_set == 'false' ]]
    then
        declare -gr disable_health_check="$default_disable_health_check"
    fi
    if [[ $max_count_opt_set == 'false' ]]
    then
        declare -gri max_count=${default_max_count}
    fi
}

main()
{
    parse_options "$@"
    validate
    set_temp_queue_policies
}

main "$@"
